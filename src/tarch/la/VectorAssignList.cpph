#ifndef _TARCH_LA_VECTORASSIGNLIST_CPPH_
#define _TARCH_LA_VECTORASSIGNLIST_CPPH_

#include "tarch/la/VectorAssignList.h"
#include "tarch/la/VectorOperations.h"

#ifdef Parallel
#include "tarch/parallel/Node.h"
#endif


namespace tarch {
namespace la {

template<typename Vector>
  typename std::enable_if< IsVector<Vector>::value,
  VectorAssignList<Vector>
>::type assignList (
  Vector & vector
) {
  return VectorAssignList<Vector> ( vector );
}

template<typename Vector>
VectorAssignList<Vector>::VectorAssignList (Vector& vector)
:
  _vector(vector), _index(0)
{}

template<typename Vector>
VectorAssignList<Vector>::VectorAssignList(
  Vector& vector,
  int     index)
: _vector(vector),
  _index(index)
{}

template<typename Vector>
VectorAssignList<Vector>::~VectorAssignList()
{
  // Assert, that the number of assigned components equals the vectors size
  #ifdef Parallel
  assertion(_index ==Traits::size(_vector), _vector, tarch::parallel::Node::getInstance().getRank() );
  #else
  assertion( _index==Traits::size(_vector), _vector );
  #endif
}

template<typename Vector>
VectorAssignList<Vector> & VectorAssignList<Vector>::operator= (const typename Traits::Scalar & toAssign)
{
  assertion ( _index < Traits::size(_vector), _vector );
  Traits::elem(_index, _vector) = toAssign;
  _index ++;
  return *this;
}

template<typename Vector>
VectorAssignList<Vector> & VectorAssignList<Vector>::operator, (const typename Traits::Scalar & toAssign)
{
  assertion ( _index < Traits::size(_vector), _vector );
  Traits::elem(_index, _vector) = toAssign;
  _index ++;
  return *this;
}

}} // namespace tarch, la

#endif /* _TARCH_LA_VECTORASSIGNLIST_CPPH_ */
