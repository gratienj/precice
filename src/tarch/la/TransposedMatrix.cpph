#ifndef _TARCH_LA_TRANSPOSEDMATRIX_CPPH_
#define _TARCH_LA_TRANSPOSEDMATRIX_CPPH_

#include "tarch/la/TransposedMatrix.h"
#include "utils/assertion.hpp"

namespace tarch {
namespace la {

template<typename Matrix>
  typename std::enable_if<IsMatrix<Matrix>::value,
  TransposedMatrix<Matrix>&
>::type transpose (Matrix& matrix)
{
  return reinterpret_cast<TransposedMatrix<Matrix>&>(matrix);
}

template<typename Matrix>
int TransposedMatrix<Matrix>::rows() const
{
  return MatrixTraits<Matrix>::cols(reinterpret_cast<const Matrix&>(*this));
}

template<typename Matrix>
int TransposedMatrix<Matrix>::cols() const
{
  return MatrixTraits<Matrix>::rows(reinterpret_cast<const Matrix&>(*this));
}

template<typename Matrix>
int TransposedMatrix<Matrix>::size() const
{
  return rows() * cols();
}

template<typename Matrix>
typename TransposedMatrix<Matrix>::Scalar & TransposedMatrix<Matrix>::operator() (
  int rowIndex,
  int colIndex
) {
  assertion (rowIndex >= 0);
  assertion (colIndex >= 0);
  assertion (rowIndex < MatrixTraits<Matrix>::cols(reinterpret_cast<Matrix&>(*this)));
  assertion (colIndex < MatrixTraits<Matrix>::rows(reinterpret_cast<Matrix&>(*this)));
  return MatrixTraits<Matrix>::elem(colIndex,rowIndex,reinterpret_cast<Matrix&>(*this));
}

template<typename Matrix>
const typename TransposedMatrix<Matrix>::Scalar & TransposedMatrix<Matrix>::operator() (
  int rowIndex,
  int colIndex ) const
{
  assertion (rowIndex >= 0);
  assertion (colIndex >= 0);
  assertion (rowIndex < MatrixTraits<Matrix>::cols(reinterpret_cast<const Matrix&>(*this)));
  assertion (colIndex < MatrixTraits<Matrix>::rows(reinterpret_cast<const Matrix&>(*this)));
  return MatrixTraits<Matrix>::celem(colIndex,rowIndex,reinterpret_cast<const Matrix&>(*this));
}

}} // namespace tarch, la

#endif /* _TARCH_LA_TRANSPOSEDMATRIX_CPPH_ */
