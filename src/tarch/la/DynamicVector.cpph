#ifndef _TARCH_LA_DYNAMICVECTOR_CPPH_
#define _TARCH_LA_DYNAMICVECTOR_CPPH_

#include "VectorAssign.h"

#include <algorithm> // for std::copy
#include <iterator> // for std::begin, std::end

namespace tarch {
namespace la {

template<typename Scalar>
DynamicVector<Scalar>::DynamicVector()
:
  _values(NULL),
  _size(0)
{}

template<typename Scalar>
DynamicVector<Scalar>::DynamicVector ( int size )
:
  _values (new Scalar[size]),
  _size (size)
{
  assertion (size >= 0, size);
}

template<typename Scalar>
DynamicVector<Scalar>::DynamicVector (
  int           size,
  const Scalar& initialValue
) :
  _values (new Scalar[size]),
  _size (size)
{
  assertion (size >= 0, size);
  assign(*this) = initialValue;
}

template<typename Scalar>
DynamicVector<Scalar>::DynamicVector (
  const DynamicVector<Scalar>& toCopy
) :
  _values (new Scalar[toCopy.size()]),
  _size (toCopy.size())
{
  assign(*this) = toCopy;
}

template<typename Scalar>
template<typename VECTOR>
DynamicVector<Scalar>::DynamicVector (
  const VECTOR& toCopy,
  typename std::enable_if< IsVector<VECTOR>::value,void*>::type
) :
  _values (new Scalar[toCopy.size()]),
  _size (toCopy.size())
{
  assign(*this) = toCopy;
}

template<typename Scalar>
DynamicVector<Scalar>::DynamicVector(const std::vector<Scalar> stdvector)
{
  _size = stdvector.size();
  _values = new Scalar[_size];
  std::copy(std::begin(stdvector), std::end(stdvector), _values);
}

template<typename Scalar>
DynamicVector<Scalar>::DynamicVector(const Eigen::VectorXd eigenVec)
{
  _size = eigenVec.size();
  _values = new Scalar[_size];
  for (int i = 0; i < eigenVec.size(); i++)
    _values[i] = eigenVec[i];
}

template<typename Scalar>
DynamicVector<Scalar>::~DynamicVector()
{
  if (_size > 0) {
    assertion (_values != NULL);
    delete[] _values;
  }
}

template<typename Scalar>
DynamicVector<Scalar>& DynamicVector<Scalar>::operator= (
  const DynamicVector<Scalar>& toAssign
) {
  assertion (toAssign.size() == _size, toAssign.size(), _size);
  assign(*this) = toAssign;
  return *this;
}

template<typename Scalar>
template<typename VECTOR>
  typename std::enable_if< IsVector<VECTOR>::value,
  DynamicVector<Scalar>&
>::type DynamicVector<Scalar>::operator= (
  const VECTOR& toAssign
) {
  assertion (toAssign.size() == _size, toAssign.size(), _size);
  assign(*this) = toAssign;
  return *this;
}

template<typename Scalar>
VectorAssignList<DynamicVector<Scalar> > DynamicVector<Scalar>::operator=(
  const Scalar& value
) {
  assertion(_size > 0);
  _values[0] = value;
  return VectorAssignList<DynamicVector<Scalar> >(*this,1);
}

template<typename Scalar>
int DynamicVector<Scalar>::size () const
{
  return _size;
}

template<typename Scalar>
template<typename Vector>
  typename std::enable_if<IsVector<Vector>::value,
  void
>::type DynamicVector<Scalar>::append (
  const Vector& toAppend
) {
  assertion (toAppend.size() >= 0, toAppend.size());
  Scalar* oldValues = _values;
  int oldSize = _size;
  _size += toAppend.size();
  _values = new Scalar[_size];
  if (oldSize > 0) {
    for (int i=0; i < oldSize; i++) {
      _values[i] = oldValues[i];
    }
    delete[] oldValues;
  }
  for (int i=0; i < toAppend.size(); i++) {
    _values[oldSize + i] = toAppend[i];
  }
}


template<typename Scalar>
void DynamicVector<Scalar>::append (
  const Scalar& toAppend
) {
  Scalar* oldValues = _values;
  _size ++;
  _values = new Scalar[_size];
  if (_size > 1) {
    for (int i=0; i < _size-1; i++) {
      _values[i] = oldValues[i];
    }
    delete[] oldValues;
  }
  _values[_size-1] = toAppend;
}

template<typename Scalar>
void DynamicVector<Scalar>::append (
  int           size,
  const Scalar& toAppend
) {
  assertion (size > 0, size);
  Scalar* oldValues = _values;
  int oldSize = _size;
  _size += size;
  _values = new Scalar[_size];
  if (oldSize > 0) {
    for (int i=0; i < oldSize; i++) {
      _values[i] = oldValues[i];
    }
    delete[] oldValues;
  }
  for (int i=0; i < size; i++) {
    _values[oldSize + i] = toAppend;
  }
}

template<typename Scalar>
void DynamicVector<Scalar>::clear ()
{
  if (_size > 0) {
    assertion (_values != NULL);
    assertion (_size > 0);
    delete[] _values;
    _size = 0;
  }
}

template<typename Scalar>
const Scalar & DynamicVector<Scalar>::operator[] (
  int index
) const {
  assertion (index >= 0, index);
  assertion (index < _size, index);
  return _values[index];
}

template<typename Scalar>
Scalar & DynamicVector<Scalar>::operator[] (
  int index
) {
  assertion (index >= 0, index);
  assertion (index < _size, index);
  return _values[index];
}

template<typename Scalar>
const Scalar & DynamicVector<Scalar>::operator() (
  int index
) const {
  assertion (index >= 0, index);
  assertion (index < _size, index);
  return _values[index];
}

template<typename Scalar>
Scalar & DynamicVector<Scalar>::operator() (
  int index
) {
  assertion (index >= 0, index);
  assertion (index < _size, index);
  return _values[index];
}

template<typename Scalar>
void DynamicVector<Scalar>::print() const
{
  printf("==== Dynamic Vector of size %i  ====\n", _size);
  for (int i=0; i < _size; i++) {
    printf("% 6.4f  ", _values[i]);
  }
  printf("\n");
}

template<typename Scalar>
DynamicVector<Scalar>::operator std::vector<Scalar>() const
{
  return std::vector<Scalar>(_values, _values + _size);
}

template<typename Scalar>
DynamicVector<Scalar>::operator Eigen::Matrix<Scalar, Eigen::Dynamic, 1>() const
{
  Eigen::Matrix<Scalar, Eigen::Dynamic, 1> v(_size);
  for (int i = 0; i < _size; i++) {
    v[i] = _values[i];
  }
  
  return v;
}

template<typename Scalar>
DynamicVector<Scalar>& DynamicVector<Scalar>::operator=(Eigen::Matrix<Scalar, Eigen::Dynamic, 1> eigenVec)
{
  if (eigenVec.size() != _size) { // Reallocate only when sizes differ
    delete[] _values;
    _size = eigenVec.size();
    _values = new Scalar[_size];
  }
  for (int i = 0; i < eigenVec.size(); i++)
    _values[i] = eigenVec[i];

  return *this;

}

}} // namespace tarch, la

#endif /* _TARCH_LA_DYNAMICVECTOR_CPPH_ */
