#ifndef _TARCH_LA_WRAPPEDVECTOR_CPPH_
#define _TARCH_LA_WRAPPEDVECTOR_CPPH_

namespace tarch {
namespace la {

template<int Size, typename Scalar>
int WrappedVector<Size,Scalar>::size () const
{
  return Size;
}

template<int Size, typename Scalar>
Scalar& WrappedVector<Size,Scalar>::operator[](
  int index
) {
  assertion (index >= 0, index);
  assertion (index < Size, index);
  return reinterpret_cast<Scalar*>(this)[index];
}

template<int Size, typename Scalar>
const Scalar& WrappedVector<Size,Scalar>::operator[](
  int index
) const {
  assertion (index >= 0, index);
  assertion (index < Size, index);
  return reinterpret_cast<const Scalar*>(this)[index];
}

template<int Size, typename Scalar>
WrappedVector<Size,Scalar>& WrappedVector<Size,Scalar>::operator= (
  const WrappedVector<Size,Scalar>& toAssign
) {
  assign(*this) = toAssign;
  return *this;
}

template<int Size, typename Scalar>
template<typename Vector>
  typename std::enable_if<IsVector<Vector>::value,
  WrappedVector<Size,Scalar>&
>::type WrappedVector<Size,Scalar>::operator= (
  const Vector& toAssign
) {
  assign(*this) = toAssign;
  return *this;
}

template<int Size, typename Scalar>
WrappedVector<Size,Scalar>& wrap (
  Scalar* toWrap
) {
  return reinterpret_cast<WrappedVector<Size,Scalar>&>(*toWrap);
}

template<int Size, typename Scalar>
const WrappedVector<Size,Scalar>& wrap (
  const Scalar* toWrap
) {
  return reinterpret_cast<const WrappedVector<Size,Scalar>&>(*toWrap);
}

template<int Size, typename Vector>
  typename std::enable_if<IsVector<Vector>::value, WrappedVector<Size,typename VectorTraits<Vector>::Scalar>&>
::type slice (
  Vector& toSlice,
  int     fromIndex
) {
  assertion (VectorTraits<Vector>::size(toSlice) >= fromIndex + Size);
  typedef typename VectorTraits<Vector>::Scalar Scalar;
  return reinterpret_cast<WrappedVector<Size,Scalar>&>(VectorTraits<Vector>::elem(fromIndex,toSlice));
}

template<int Size, typename Vector>
typename std::enable_if<IsVector<Vector>::value, const WrappedVector<Size,typename VectorTraits<Vector>::Scalar>&>
::type slice (
  const Vector& toSlice,
  int           fromIndex
) {
  assertion (VectorTraits<Vector>::size(toSlice) >= fromIndex + Size);
  typedef typename VectorTraits<Vector>::Scalar Scalar;
  return reinterpret_cast<const WrappedVector<Size,Scalar>&>(VectorTraits<Vector>::celem(fromIndex,toSlice));
}

} // namespace la
} // namespace tarch

#endif /* _TARCH_LA_WRAPPEDVECTOR_CPPH_ */
