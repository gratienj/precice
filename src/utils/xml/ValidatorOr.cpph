#ifndef PRECICE_UTILS_VALIDATOROR_CPPH_
#define PRECICE_UTILS_VALIDATOROR_CPPH_


template<typename VALUE_T>
const Validator<VALUE_T>& operator||
(
   const Validator<VALUE_T>& lhs,
   const Validator<VALUE_T>& rhs )
{
   ValidatorOr<VALUE_T>* validator = new ValidatorOr<VALUE_T>(lhs, rhs);
   return *validator;
}

template< typename VALUE_T >
ValidatorOr<VALUE_T>:: ValidatorOr
(
   const Validator<VALUE_T>& lhs,
   const Validator<VALUE_T>& rhs )
{
   _lhs = &lhs.clone();
   _rhs = &rhs.clone();
}

template<typename VALUE_T>
bool ValidatorOr<VALUE_T>:: validateValue ( const VALUE_T& value )
{
   return _lhs->validateValue(value) || _rhs->validateValue(value);
}

template<typename VALUE_T>
Validator<VALUE_T> & ValidatorOr<VALUE_T>:: clone () const
{
   Validator<VALUE_T> * validator = new ValidatorOr<VALUE_T> (*_lhs, *_rhs);
   return *validator;
}

template<typename VALUE_T>
std::string ValidatorOr<VALUE_T>:: getErrorMessage () const
{
  return _lhs->getErrorMessage() + " or " + _rhs->getErrorMessage();
}

template<typename VALUE_T>
std::string ValidatorOr<VALUE_T>:: getDocumentation() const
{
  return _lhs->getDocumentation() + " or " + _rhs->getDocumentation();
}


#endif /* PRECICE_UTILS_VALIDATOROR_CPPH_ */
