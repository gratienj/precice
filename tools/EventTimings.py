"""
Parses the format that is generated by the EventTimings framework. Sample input:

# Run finished at Tue Nov 10 15:49:40 2015
# Eventname Count Total Max Min Avg T%
"GLOBAL" 1 2658 2658 2658 2658 100
"M2N::acceptMasterConnection" 1 6 6 6 6 0
"advance" 1 0 0 0 0 0
"initialize" 1 2512 2512 2512 2512 94
"receive global mesh" 1 43 43 43 43 1
"send global mesh" 1 0 0 0 0 0

# Run finished at Tue Nov 10 15:52:40 2015
# Eventname Count Total Max Min Avg T%
"GLOBAL" 1 2666 2666 2666 2666 100
"M2N::requestMasterConnection" 1 12 12 12 12 0
"M2N::requestMasterConnection/Publisher::read" 1 0 0 0 0 0
"advance" 1 2474 2474 2474 2474 92
"initialize" 1 43 43 43 43 1
"receive global mesh" 1 8 8 8 8 0
"send global mesh" 1 0 0 0 0 0

This is converted to a data structure:

[
   {
       "timestamp" : "Time of the run, a python datatime object"
       "global"    : "Global timings, a numpy array
       "timings"   : "numpy.array with custom datatype"
   }
]
"""

import locale, shlex, datetime
import numpy as np

datatype = [ ("name", object),
             ("count", int),
             ("total", int),
             ("max", float),
             ("min", float),
             ("avg", float),
             ("percent", float)
]


def readBlock(f):
    """ Generator that returns one block at a time, each line as list item. """
    lines = []
    with open(f, "r") as f:
        for line in f:
            l = line.strip()
            if l == "" and len(lines) > 2:
                yield lines
                lines = []
            elif l != "":
                lines.append(l)
        if len(lines):
            yield lines
            
    raise StopIteration()

    
def parseTimings(tStr):
    """ Returns event name and timings as a dict. """
    s = shlex.split(tStr)
    return np.array(tuple(s), dtype=datatype)
    

def parseEventlog(file):
    """ Takes a filename, parses the Eventlog and returns the data. """
    locale.setlocale(locale.LC_TIME, "C") # Set the locale, so that strptime works as intended.

    events = []
    
    for i in readBlock(file):
        timeStamp = datetime.datetime.strptime(i[0][19:], "%a %b %d %H:%M:%S %Y")
        procs = int(i[1][24:])
        globalTimings = parseTimings(i[3])
        timings = np.hstack( [parseTimings(t) for t in i[4:]] )
        
        events.append( {
            "timestamp" : timeStamp,
            "global"    : globalTimings,
            "procs"     : procs,
            "timings"   : timings
        } )

    return events
    
